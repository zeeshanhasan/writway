# Feature: Bootstrap Project

## Goal

Bootstrap separate frontend and backend projects aligned to the Cursor rules and new deployment direction:

* Vercel-only deployments
* Frontend served at `https://writway.com`
* Backend (API) served at `https://api.writway.com`
* Supabase (PostgreSQL) as the database via Prisma
* CI-driven migrations; no migrations during build/request time

---

## Deliverables

* Repository structure:

  ```
  /backend   → Node.js + Express (serverless via serverless-http) + Prisma (Supabase)
  /frontend  → Next.js (App Router) + shadcn/ui + Tailwind
  ```
* Per-app install model: each app has its own `package.json` and `package-lock.json`.
* Rule-conformant configs under `.cursor/rules` (backend, frontend, database, devops).
* No Docker Compose; use Supabase for dev/staging and Vercel for hosting.

---

## Backend

### Stack & layout
* Node.js (LTS), Express, Zod, Prisma, `serverless-http`.
* Foldering per `backend.mdc` (`/src/api`, `/services`, `/repositories`, `/middlewares`, `/schemas`, `/utils`, `/config`).

### Dependencies
* Runtime: `express`, `cors`, `dotenv`, `zod`, `prisma`, `@prisma/client`, `serverless-http`.
* Dev: `typescript`, `ts-node`, `nodemon`, `jest`, `supertest`.

### Serverless entry
* Export Express app (no `listen`) and wrap with `serverless-http` under `api/index.ts`.
* Local dev uses `src/index.ts` with `app.listen` guarded for non-serverless.

### API conventions
* Base path: `/api/v1`.
* Standard response envelope; error codes registry.
* CORS: allow `https://writway.com` (prod), `http://localhost:3000` (dev).
* Auth: Google OAuth handled by frontend; backend issues JWT + refresh. Cookies (if used): `domain=.writway.com`, `Secure`, `HttpOnly`, `SameSite=None`.
* Health: `/health` (basic), `/ready` (DB and deps).
* Rate limiting and logging per rules.

### Prisma & Supabase
* Place `schema.prisma` at `backend/prisma/schema.prisma`.
* `DATABASE_URL` uses Supabase (prefer pooled `pgbouncer=true&connection_limit=1`).
* Migrations via CI/CD only (`prisma migrate deploy` on merge to `main`).
* No migrations at Vercel build or request time.
* Multi-tenancy enforced via Prisma middleware (`tenant_id` scoping).

### Scripts
* `dev` (nodemon), `build` (tsc), `start` (node dist), `migrate` (prisma migrate dev for local), `studio`.

---

## Frontend

### Stack & layout
* Next.js (App Router, TypeScript), shadcn/ui, Tailwind, React Query.
* Project structure per `frontend.mdc` (`/(public)`, `/(dashboard)`, components, features, lib, providers).

### Dependencies
* `@tanstack/react-query`, `lucide-react`, `recharts`, `@hookform/resolvers`, `react-hook-form`, `zod`.

### Data access
* API base URL from `process.env.NEXT_PUBLIC_API_URL` (prod: `https://api.writway.com`).
* Use a typed SDK generated from OpenAPI; no raw fetches inside components.
* Global error handling for envelope errors; skeletons and empty states.

### Routing & auth
* `(public)` for marketing; `(dashboard)` protected via server-side session checks (middleware).
* If cookies used for auth, ensure cookie domain `.writway.com`.

---

## DevOps & Environments

### Domains & Vercel projects
* Frontend project → `writway.com`
* Backend project → `api.writway.com`

### Environment variables
* Frontend: `NEXT_PUBLIC_API_URL`, `NEXT_PUBLIC_ENV`.
* Backend: `DATABASE_URL` (Supabase), `JWT_SECRET`, `CORS_ORIGIN`, `COOKIE_DOMAIN`, provider keys.

### CI/CD
* GitHub Actions job on merge to `main`:
  * `npm ci` in `backend`
  * `npx prisma migrate deploy`
  * Run backend tests (optional but recommended)
* Vercel auto-deploys both projects from `main`.

### Local development
* Use a dedicated Supabase dev/staging project. Do not write to production DB from local.
* If read-only access to prod is required for debugging, create a limited user and restrict IPs.
* Keep email/webhooks/billing gated behind environment checks in dev.

---

## Success Criteria

* Backend deploys on Vercel and serves `/api/v1/health` and `/ready` successfully.
* Frontend deploys on Vercel and reads `NEXT_PUBLIC_API_URL` to call the API.
* CI successfully applies Prisma migrations to Supabase on `main`.
* CORS and cookies (if used) behave correctly across `writway.com` and `api.writway.com`.
